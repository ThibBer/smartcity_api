{
	"info": {
		"_postman_id": "522817b8-937a-491e-99f4-759d32d05e08",
		"name": "WalloniaFixed API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Wrong login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"thibaut.berg@hotmail.com\",\r\n    \"password\": \"badPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Good login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response should have a JWT token\", () => {\r",
									"    pm.response.to.be.string;\r",
									"    pm.expect(pm.response.text().split('.').length).to.be.equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"thibaut.berg@hotmail.com\",\r\n    \"password\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The JWT should contain status: user\", () => {\r",
									"    const text = pm.response.text();\r",
									"    const payload_string = atob(text.split(\".\")[1]); // see: https://gist.github.com/benhowes/ebf9d2f905d7744e7aa093afe19ddbcd#gistcomment-2811160\r",
									"    const payload_objet = JSON.parse(payload_string);\r",
									"    console.log(payload_objet)\r",
									"    pm.expect(payload_objet.user.role).to.be.equal(\"user\"); \r",
									"    pm.environment.set(\"jwt_token_user\", text.split('\"')[1]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"rfriedlos2@house.gov\",\r\n    \"password\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The JWT should contain status: admin\", () => {\r",
									"    const text = pm.response.text();\r",
									"    const payload_string = atob(text.split(\".\")[1]); // see: https://gist.github.com/benhowes/ebf9d2f905d7744e7aa093afe19ddbcd#gistcomment-2811160\r",
									"    const payload_objet = JSON.parse(payload_string);\r",
									"    pm.expect(payload_objet.user.role).to.be.equal(\"admin\");\r",
									"    pm.environment.set(\"jwt_token_admin\", text.split('\"')[1]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"thibaut.berg@hotmail.com\",\r\n    \"password\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get user without jwt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user as other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user himself",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User 3 should be correctly returned\", () => {\r",
									"    const user = {\r",
									"        \"id\": 3,\r",
									"        \"email\": \"rfriedlos2@house.gov\",\r",
									"        \"password\": \"$2b$10$OoWWML05uIJCHV4FlE7z7eLq3MRatgeiSIpBDumGM./zlRrynkaIm\",\r",
									"        \"first_name\": \"Pélagie\",\r",
									"        \"last_name\": \"Friedlos\",\r",
									"        \"birth_date\": \"1981-03-10T23:00:00.000Z\",\r",
									"        \"role\": \"user\",\r",
									"        \"city\": \"Prostřední Bečva\",\r",
									"        \"street\": \"Messerschmidt\",\r",
									"        \"zip_code\": 5124,\r",
									"        \"house_number\": 55\r",
									"    };\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.be.eql(user);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user/3",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user not himself as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status code should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User 1 should be correctly returned\", () => {\r",
									"    const user = {\r",
									"        \"id\": 1,\r",
									"        \"email\": \"thibaut.berg@hotmail.com\",\r",
									"        \"password\": \"$2b$10$OoWWML05uIJCHV4FlE7z7eLq3MRatgeiSIpBDumGM./zlRrynkaIm\",\r",
									"        \"first_name\": \"Thibaut\",\r",
									"        \"last_name\": \"Berg\",\r",
									"        \"birth_date\": \"2001-10-27T22:00:00.000Z\",\r",
									"        \"role\": \"admin\",\r",
									"        \"city\": \"Marche-en-Famenne\",\r",
									"        \"street\": \"Rue des Champs\",\r",
									"        \"zip_code\": 6900,\r",
									"        \"house_number\": 53\r",
									"    };\r",
									"    \r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.be.eql(user);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create admin as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"email2test@gmail.com\",\r\n    \"password\": \"$2b$10$OoWWML05uIJCHV4FlE7z7eLq3MRatgeiSIpBDumGM./zlRrynkaIm\",\r\n    \"first_name\": \"first_name\",\r\n    \"last_name\": \"last_name\",\r\n    \"birth_date\": \"1981-03-10T23:00:00.000Z\",\r\n    \"role\": \"admin\",\r\n    \"city\": \"Prostřední Bečva\",\r\n    \"street\": \"Messerschmidt\",\r\n    \"zip_code\": 5124,\r\n    \"house_number\": 55\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create admin as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"email3test@gmail.com\",\r\n    \"password\": \"$2b$10$OoWWML05uIJCHV4FlE7z7eLq3MRatgeiSIpBDumGM./zlRrynkaIm\",\r\n    \"first_name\": \"first_name admin\",\r\n    \"last_name\": \"last_name admin\",\r\n    \"birth_date\": \"1981-03-10T23:00:00.000Z\",\r\n    \"role\": \"admin\",\r\n    \"city\": \"Prostřední Bečva admin\",\r\n    \"street\": \"Messerschmidt admin\",\r\n    \"zip_code\": 5123,\r\n    \"house_number\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update not himself as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 174,\r\n    \"email\": \"jesuisadmin@etjechangetonemail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update himself as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"email\": \"ceciestuneadresse@email2test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update not himself as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 169,\r\n    \"email\": \"updateNotHimselfAsAdmin@email2test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete not himself as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 145\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete himself as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete not himself as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 142\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ReportType",
			"item": [
				{
					"name": "Get ReportType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ReportType 1 should be correctly returned\", () => {\r",
									"    const reportType = {\r",
									"        \"id\": 1,\r",
									"        \"label\": \"Dépôt clandestin\",\r",
									"        \"image\": \"1e031fb5-cd0e-4a29-839f-164bea9c4813.jpeg\"\r",
									"    }\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.be.eql(reportType);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/reportType/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"reportType",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add ReportType as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"label\": \"Ceci est le libellé du type de signalement\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/reportType",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"reportType"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update ReportType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"label\": \"Ceci est encore et toujours le libellé du type de signalement\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/reportType",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"reportType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete ReportType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/reportType",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"reportType"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "Get Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"ReportType 1 should be correctly returned\", () => {\r",
									"    const report = {\r",
									"        \"id\": 1,\r",
									"        \"description\": \"Je signale un problème en face de chez moi\",\r",
									"        \"state\": \"pending\",\r",
									"        \"city\": \"Chapois\",\r",
									"        \"street\": \"Rue du pont\",\r",
									"        \"zip_code\": 5590,\r",
									"        \"house_number\": 53,\r",
									"        \"reporter\": 1,\r",
									"        \"report_type\": {\r",
									"            \"id\": 2,\r",
									"            \"label\": \"Lampadaire cassé\",\r",
									"            \"image\": \"ed09a04d-c88f-446d-b08b-d8229231235a.jpeg\"\r",
									"        }\r",
									"    };\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    delete response.created_at;\r",
									"\r",
									"    pm.expect(response).to.be.deep.equal(report);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{port}}/v1/report/1",
							"host": [
								"{{base_url}}"
							],
							"port": "{{port}}",
							"path": [
								"v1",
								"report",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}